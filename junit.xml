<?xml version="1.0" encoding="UTF-8"?>
<testsuites name="jest tests" tests="69" failures="0" errors="0" time="36.418">
  <testsuite name="SQLCompatibilityService" errors="0" failures="0" skipped="0" timestamp="2025-09-03T21:25:30" time="13.947" tests="47">
    <testcase classname="SQLCompatibilityService transpileSQL should transpile basic SELECT query without changes" name="SQLCompatibilityService transpileSQL should transpile basic SELECT query without changes" time="1.284">
    </testcase>
    <testcase classname="SQLCompatibilityService transpileSQL should transpile MySQL CONCAT to SQLite concatenation" name="SQLCompatibilityService transpileSQL should transpile MySQL CONCAT to SQLite concatenation" time="0.007">
    </testcase>
    <testcase classname="SQLCompatibilityService transpileSQL should transpile MySQL NOW() to SQLite datetime" name="SQLCompatibilityService transpileSQL should transpile MySQL NOW() to SQLite datetime" time="0.011">
    </testcase>
    <testcase classname="SQLCompatibilityService transpileSQL should transpile MySQL data types to SQLite equivalents" name="SQLCompatibilityService transpileSQL should transpile MySQL data types to SQLite equivalents" time="0.011">
    </testcase>
    <testcase classname="SQLCompatibilityService transpileSQL should handle LIMIT with OFFSET syntax" name="SQLCompatibilityService transpileSQL should handle LIMIT with OFFSET syntax" time="0.007">
    </testcase>
    <testcase classname="SQLCompatibilityService transpileSQL should parse strong consistency hint" name="SQLCompatibilityService transpileSQL should parse strong consistency hint" time="0.006">
    </testcase>
    <testcase classname="SQLCompatibilityService transpileSQL should parse bounded consistency hint" name="SQLCompatibilityService transpileSQL should parse bounded consistency hint" time="0.008">
    </testcase>
    <testcase classname="SQLCompatibilityService transpileSQL should parse weak consistency hint" name="SQLCompatibilityService transpileSQL should parse weak consistency hint" time="0.005">
    </testcase>
    <testcase classname="SQLCompatibilityService transpileSQL should transpile transaction statements" name="SQLCompatibilityService transpileSQL should transpile transaction statements" time="0.004">
    </testcase>
    <testcase classname="SQLCompatibilityService transpileSQL should handle complex queries with multiple functions" name="SQLCompatibilityService transpileSQL should handle complex queries with multiple functions" time="0.006">
    </testcase>
    <testcase classname="SQLCompatibilityService parseQueryHints should return empty hints for queries without hints" name="SQLCompatibilityService parseQueryHints should return empty hints for queries without hints" time="0.019">
    </testcase>
    <testcase classname="SQLCompatibilityService parseQueryHints should handle multiple hints (last one wins)" name="SQLCompatibilityService parseQueryHints should handle multiple hints (last one wins)" time="0.002">
    </testcase>
    <testcase classname="SQLCompatibilityService parseQueryHints should handle malformed hints gracefully" name="SQLCompatibilityService parseQueryHints should handle malformed hints gracefully" time="0.004">
    </testcase>
    <testcase classname="SQLCompatibilityService transpileDDL should transpile CREATE TABLE with MySQL types" name="SQLCompatibilityService transpileDDL should transpile CREATE TABLE with MySQL types" time="0.008">
    </testcase>
    <testcase classname="SQLCompatibilityService transpileDDL should handle ALTER TABLE ADD COLUMN" name="SQLCompatibilityService transpileDDL should handle ALTER TABLE ADD COLUMN" time="0.006">
    </testcase>
    <testcase classname="SQLCompatibilityService transpileDDL should handle CREATE INDEX" name="SQLCompatibilityService transpileDDL should handle CREATE INDEX" time="0.006">
    </testcase>
    <testcase classname="SQLCompatibilityService transpileDDL should handle DROP TABLE" name="SQLCompatibilityService transpileDDL should handle DROP TABLE" time="0.004">
    </testcase>
    <testcase classname="SQLCompatibilityService transpileDML should transpile INSERT with MySQL functions" name="SQLCompatibilityService transpileDML should transpile INSERT with MySQL functions" time="0.003">
    </testcase>
    <testcase classname="SQLCompatibilityService transpileDML should transpile UPDATE with MySQL functions" name="SQLCompatibilityService transpileDML should transpile UPDATE with MySQL functions" time="0.003">
    </testcase>
    <testcase classname="SQLCompatibilityService transpileDML should transpile DELETE with LIMIT" name="SQLCompatibilityService transpileDML should transpile DELETE with LIMIT" time="0.003">
    </testcase>
    <testcase classname="SQLCompatibilityService prepareStatement should handle positional parameters" name="SQLCompatibilityService prepareStatement should handle positional parameters" time="0.003">
    </testcase>
    <testcase classname="SQLCompatibilityService prepareStatement should handle named parameters (basic conversion)" name="SQLCompatibilityService prepareStatement should handle named parameters (basic conversion)" time="0.001">
    </testcase>
    <testcase classname="SQLCompatibilityService prepareStatement should handle mixed parameter styles" name="SQLCompatibilityService prepareStatement should handle mixed parameter styles" time="0.001">
    </testcase>
    <testcase classname="SQLCompatibilityService validateSQL should not throw for valid SQL" name="SQLCompatibilityService validateSQL should not throw for valid SQL" time="0.062">
    </testcase>
    <testcase classname="SQLCompatibilityService validateSQL should handle potentially unsupported features gracefully" name="SQLCompatibilityService validateSQL should handle potentially unsupported features gracefully" time="0.005">
    </testcase>
    <testcase classname="SQLCompatibilityService extractTableName should extract table name from SELECT" name="SQLCompatibilityService extractTableName should extract table name from SELECT" time="0.005">
    </testcase>
    <testcase classname="SQLCompatibilityService extractTableName should extract table name from INSERT" name="SQLCompatibilityService extractTableName should extract table name from INSERT" time="0.006">
    </testcase>
    <testcase classname="SQLCompatibilityService extractTableName should extract table name from UPDATE" name="SQLCompatibilityService extractTableName should extract table name from UPDATE" time="0.008">
    </testcase>
    <testcase classname="SQLCompatibilityService extractTableName should extract table name from DELETE" name="SQLCompatibilityService extractTableName should extract table name from DELETE" time="0.004">
    </testcase>
    <testcase classname="SQLCompatibilityService extractTableName should extract table name from CREATE TABLE" name="SQLCompatibilityService extractTableName should extract table name from CREATE TABLE" time="0.004">
    </testcase>
    <testcase classname="SQLCompatibilityService getStatementType should identify SELECT statements" name="SQLCompatibilityService getStatementType should identify SELECT statements" time="0.001">
    </testcase>
    <testcase classname="SQLCompatibilityService getStatementType should identify INSERT statements" name="SQLCompatibilityService getStatementType should identify INSERT statements" time="0.001">
    </testcase>
    <testcase classname="SQLCompatibilityService getStatementType should identify UPDATE statements" name="SQLCompatibilityService getStatementType should identify UPDATE statements" time="0.001">
    </testcase>
    <testcase classname="SQLCompatibilityService getStatementType should identify DELETE statements" name="SQLCompatibilityService getStatementType should identify DELETE statements" time="0.001">
    </testcase>
    <testcase classname="SQLCompatibilityService getStatementType should identify DDL statements" name="SQLCompatibilityService getStatementType should identify DDL statements" time="0.001">
    </testcase>
    <testcase classname="SQLCompatibilityService getStatementType should identify ALTER statements as DDL" name="SQLCompatibilityService getStatementType should identify ALTER statements as DDL" time="0.001">
    </testcase>
    <testcase classname="SQLCompatibilityService getStatementType should identify DROP statements as DDL" name="SQLCompatibilityService getStatementType should identify DROP statements as DDL" time="0">
    </testcase>
    <testcase classname="SQLCompatibilityService edge cases and error handling should handle empty SQL gracefully" name="SQLCompatibilityService edge cases and error handling should handle empty SQL gracefully" time="0.003">
    </testcase>
    <testcase classname="SQLCompatibilityService edge cases and error handling should handle SQL with only whitespace" name="SQLCompatibilityService edge cases and error handling should handle SQL with only whitespace" time="0.003">
    </testcase>
    <testcase classname="SQLCompatibilityService edge cases and error handling should handle malformed function calls" name="SQLCompatibilityService edge cases and error handling should handle malformed function calls" time="0.003">
    </testcase>
    <testcase classname="SQLCompatibilityService edge cases and error handling should handle nested function calls" name="SQLCompatibilityService edge cases and error handling should handle nested function calls" time="0.003">
    </testcase>
    <testcase classname="SQLCompatibilityService edge cases and error handling should handle complex WHERE clauses with functions" name="SQLCompatibilityService edge cases and error handling should handle complex WHERE clauses with functions" time="0.01">
    </testcase>
    <testcase classname="SQLCompatibilityService edge cases and error handling should handle JOIN queries" name="SQLCompatibilityService edge cases and error handling should handle JOIN queries" time="0.003">
    </testcase>
    <testcase classname="SQLCompatibilityService edge cases and error handling should handle subqueries" name="SQLCompatibilityService edge cases and error handling should handle subqueries" time="0.002">
    </testcase>
    <testcase classname="SQLCompatibilityService edge cases and error handling should handle UNION queries" name="SQLCompatibilityService edge cases and error handling should handle UNION queries" time="0.005">
    </testcase>
    <testcase classname="SQLCompatibilityService performance and large queries should handle large SQL queries" name="SQLCompatibilityService performance and large queries should handle large SQL queries" time="0.005">
    </testcase>
    <testcase classname="SQLCompatibilityService performance and large queries should handle queries with many parameters" name="SQLCompatibilityService performance and large queries should handle queries with many parameters" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="ConfigService" errors="0" failures="0" skipped="0" timestamp="2025-09-03T21:25:44" time="2.597" tests="10">
    <testcase classname="ConfigService getTablePolicy should return policy for existing table" name="ConfigService getTablePolicy should return policy for existing table" time="0.012">
    </testcase>
    <testcase classname="ConfigService getTablePolicy should throw error for non-existent table" name="ConfigService getTablePolicy should throw error for non-existent table" time="0.024">
    </testcase>
    <testcase classname="ConfigService getTablePolicies should return all table policies" name="ConfigService getTablePolicies should return all table policies" time="0.003">
    </testcase>
    <testcase classname="ConfigService getTablePolicies should cache policies after first load" name="ConfigService getTablePolicies should cache policies after first load" time="0.006">
    </testcase>
    <testcase classname="ConfigService getRoutingPolicy should return routing policy" name="ConfigService getRoutingPolicy should return routing policy" time="0.004">
    </testcase>
    <testcase classname="ConfigService resolveShardId should resolve shard by tenant ID" name="ConfigService resolveShardId should resolve shard by tenant ID" time="0.005">
    </testcase>
    <testcase classname="ConfigService resolveShardId should resolve shard by hash for non-tenant data" name="ConfigService resolveShardId should resolve shard by hash for non-tenant data" time="0.012">
    </testcase>
    <testcase classname="ConfigService resolveShardId should use default shard when no routing criteria match" name="ConfigService resolveShardId should use default shard when no routing criteria match" time="0.01">
    </testcase>
    <testcase classname="ConfigService validateConfig should validate correct configuration" name="ConfigService validateConfig should validate correct configuration" time="0.007">
    </testcase>
    <testcase classname="ConfigService clearCache should clear configuration cache" name="ConfigService clearCache should clear configuration cache" time="0.005">
    </testcase>
  </testsuite>
  <testsuite name="CacheService" errors="0" failures="0" skipped="0" timestamp="2025-09-03T21:25:44" time="2.855" tests="12">
    <testcase classname="CacheService get should return null for cache miss" name="CacheService get should return null for cache miss" time="0.244">
    </testcase>
    <testcase classname="CacheService get should return cache entry for cache hit" name="CacheService get should return cache entry for cache hit" time="0.002">
    </testcase>
    <testcase classname="CacheService get should handle invalid JSON gracefully" name="CacheService get should handle invalid JSON gracefully" time="0.003">
    </testcase>
    <testcase classname="CacheService set should store cache entry with correct format" name="CacheService set should store cache entry with correct format" time="0.003">
    </testcase>
    <testcase classname="CacheService set should use default TTL values when not provided" name="CacheService set should use default TTL values when not provided" time="0.002">
    </testcase>
    <testcase classname="CacheService delete should delete cache entry" name="CacheService delete should delete cache entry" time="0.002">
    </testcase>
    <testcase classname="CacheService cache freshness checks should correctly identify fresh entries" name="CacheService cache freshness checks should correctly identify fresh entries" time="0.004">
    </testcase>
    <testcase classname="CacheService cache freshness checks should correctly identify stale but revalidatable entries" name="CacheService cache freshness checks should correctly identify stale but revalidatable entries" time="0.001">
    </testcase>
    <testcase classname="CacheService cache freshness checks should correctly identify expired entries" name="CacheService cache freshness checks should correctly identify expired entries" time="0.002">
    </testcase>
    <testcase classname="CacheService key generation should create entity key" name="CacheService key generation should create entity key" time="0.002">
    </testcase>
    <testcase classname="CacheService key generation should create index key" name="CacheService key generation should create index key" time="0.001">
    </testcase>
    <testcase classname="CacheService key generation should create query key" name="CacheService key generation should create query key" time="0.006">
    </testcase>
  </testsuite>
</testsuites>
